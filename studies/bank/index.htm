<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="GENERATOR" CONTENT="Mozilla/4.05 [en] (WinNT; U) [Netscape]">
   <META HTTP-EQUIV="keywords" CONTENT="bank server">
   <META NAME="Author" CONTENT="Yun-Tung Lau">
   <TITLE>Readme for the Bank example</TITLE>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000FF" VLINK="#990066" ALINK="#FF0000">

<CENTER>
<H2>
<FONT COLOR="#3333FF">Bank Server</FONT></H2></CENTER>
In this example the <B>Bank Server </B>simulates an object wrapper for
a legacy bank system.&nbsp; The interface design follows the object manager
pattern.&nbsp; This example demonstrates how to:
<UL>
<LI>
Design interfaces using the object manager pattern</LI>

<LI>
Implement interfaces using the TIE mechanism</LI>

<LI>
Manage CORBA objects with a hash table</LI>

<LI>
Implement thread-safe synchronized operations</LI>
</UL>
This server can be used together with the <A HREF="../atmcs/index.htm">ATM
Central Server</A> (or <A HREF="../atmcs-i/index.htm">ATM Central Server
- interface layer</A>) in the ATM System Software case study.
<H3>

<HR WIDTH="80%"></H3>

<H3>
<FONT COLOR="#FF0000">Source Files</FONT></H3>

<UL>
<LI>
<A HREF="Bank.idl">Bank.idl</A></LI>

<BR>IDL file for the interfaces AccountIF and AccountMgrIF in the bank
module.&nbsp; (IF stands for interface.)&nbsp; Also defined are exception
"BankError" and an account information structure AccInfo.
<BR>&nbsp;
<LI>
<A HREF="Server.java">Server.java</A></LI>

<BR>The Server code, which has a main function that creates an instance
of the <B>AccountMgrImpl</B> class and calls <TT>obj_is_ready()</TT>and
<TT>impl_is_ready()</TT> to make it available to the client.
<BR>The code contains the following interface implementation classes:
<UL>
<LI>
<B>AccountMgrImpl</B></LI>

<BR>Implementation for the account manager interface "AccountMgrIF". It
implements access control methods: <TT>login</TT> and <TT>logout</TT>,
and mangement methods: <TT>open </TT>(opens an account), <TT>remove </TT>(removes
an account), and <TT>showAccounts</TT> (shows the name of all accounts).
<BR>&nbsp;</UL>

<UL>
<LI>
<B>AccountImpl</B></LI>

<BR>Implementation for the interface "AccountIF".&nbsp;&nbsp; It implements
get methods: getB<TT>alance, getAccInfo, getHistory</TT>, and transaction
methods:<TT> deposit, withdraw, transferTo, payBill.</TT>&nbsp; Note that
all transactions are declared "synchronized" in order to allow multiple
client threads to perform the transactions safely.
<BR>&nbsp;</UL>

<LI>
<A HREF="Client.java">Client.java</A></LI>

<BR>The client code.&nbsp; It binds to the <B>AccountMgrImpl</B> object
using a bank server name (e.g. "ABC_Bank_Account_Manager").&nbsp; It then
waits for user commands to open accounts and to initiate transactions.&nbsp;
The <TT>runTerminal</TT> method translates command line inputs into method
calls to the server.&nbsp; One may also run the client with an input text
file that contains multiple command lines.&nbsp; An example is in <A HREF="Test1.txt">Test1.txt</A>.</UL>

<H3>
<FONT COLOR="#FF0000">Batch Files</FONT></H3>

<UL>
<LI>
<FONT COLOR="#000099">build.bat</FONT></LI>

<BR>A batch file for building the client and server on <I>Windows</I>.&nbsp;
It will first invoke the IDL compiler and then compile the server and client
source codes.&nbsp; A subdirectory named "bank" will be created, which
contains the CORBA stub and skeleton codes and their corresponding class
files.
<LI>
<FONT COLOR="#000099">runsrv.bat</FONT></LI>

<BR>A batch file for running the server. The command line format
is:
<PRE>&nbsp;&nbsp;&nbsp; <TT>runsrv [server_name]</TT></PRE>
The default server name is "ABC_Bank_Account_Manager".
<LI>
<FONT COLOR="#000099">client.bat</FONT></LI>

<BR>A batch file for running the client. The command line format
is:
<PRE>&nbsp;&nbsp;&nbsp; <TT>client [hostname] [command.txt]</TT></PRE>
where the optional hostname (or IP address) is where the server is running
and <TT>command.txt</TT> is an optional input command file such as <A HREF="Test1.txt">Test1.txt</A>.</UL>

<H3>
<FONT COLOR="#FF0000">Running the Codes</FONT></H3>
This example was developed under VisiBroker (<A HREF="../studies.htm#visibroker">link</A>).&nbsp;
To run the codes, make sure that the VisiBroker Smart Agent (osagent) is
running on the server object's network. Then enter the commands:

<P><I><TT>On Windows:</TT></I>
<UL>
<PRE><TT>start runsrv</TT></PRE>

<PRE><TT>client&nbsp; </TT>(or <TT>client [hostname] [Test1.txt])</TT></PRE>
</UL>
<I><TT>On Unix:</TT></I>
<UL>
<PRE><TT>vbj Server &amp;</TT></PRE>

<PRE><TT>vbj Client&nbsp; </TT>(or vbj C<TT>lient [hostname] [Test1.txt])</TT></PRE>
</UL>

<HR WIDTH="100%">
<BR>&nbsp;
</BODY>
</HTML>
