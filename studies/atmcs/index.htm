<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="GENERATOR" CONTENT="Mozilla/4.05 [en] (WinNT; U) [Netscape]">
   <META HTTP-EQUIV="keywords" CONTENT="bank server">
   <META NAME="Author" CONTENT="Yun-Tung Lau">
   <TITLE>Readme for the ATM Central Server example</TITLE>
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000FF" VLINK="#990066" ALINK="#FF0000">

<CENTER>
<H2>
<FONT COLOR="#3333FF">ATM Central Server</FONT></H2></CENTER>
In this example the <B>ATM Central Server (atmcs)</B> interacts with the
ATM clients and relays transaction requests to individual banks.&nbsp;
The interface design follows the object factory pattern .&nbsp; This example
demonstrates how to:
<UL>
<LI>
Design interfaces using the object factory pattern</LI>

<LI>
Use an interface as a servant class</LI>

<LI>
Implement interfaces as both server and client</LI>

<LI>
Manage CORBA objects with a hash table</LI>

<LI>
Connect to objects in the persistent layer</LI>

<LI>
Handle transactions within synchronized blocks</LI>

<LI>
Use mutliple threads to handle access to the persistent layer from clients
and the console terminal.</LI>
</UL>
This server must be used together with the <A HREF="../bank/index.htm">Bank
Server</A>.&nbsp; Since this implementation has both interface layer objects
and persistent objects, you need both VisiBroker (<A HREF="../studies.htm#visibroker">link</A>)
and PsePro (<A HREF="../studies.htm#psepro">link</A>).
<H3>

<HR WIDTH="80%"></H3>

<H3>
<FONT COLOR="#FF0000">Source Files</FONT></H3>

<UL>
<LI>
<A HREF="atmcs.idl">atmcs.idl</A></LI>

<BR>IDL file for the interfaces SessionIF and SessionMgrIF in the bank
module.&nbsp; (IF stands for interface.)&nbsp; Also defined are exception
"AtmcsError", a cash card data structure CardInfo, and an account information
structure AccountInfo.

<P>SessionMgrIF only has <TT>login </TT>and <TT>logout</TT> operations
exposed, though the implementation class may have convential object management
operations.
<BR>&nbsp;
<LI>
<A HREF="Server.java">Server.java</A></LI>

<BR>The Server code, which has a main function that creates an instance
of the <B>SessionMgrImpl</B> class and calls&nbsp; <TT>impl_is_ready()</TT>
(via a separate thread class BoaThread) to make it available to the client.
<BR><BR>
The code also defines a thread class TerminalThread, which is used to run
a console session for direct access to the database by an administrator
(a login password "atmcs" is needed).&nbsp; Another similar thread may
also be started to process commands from an input command file if it is
present.&nbsp; To shutdown the server, type in "shutdown" from the console.

<P>The Server code contains the following interface implementation classes:
<UL>
<LI>
<B>SessionMgrImpl</B></LI>

<BR>Implementation for the session manager interface "SessionMgrIF". It
implements access control methods: <TT>login</TT> and <TT>logout.</TT>
Mangement methods like <TT>remove </TT>(removes a session), and <TT>showSessions</TT>
are implemented but not exposed as interface operations.

<P>This class contains a link to its persistent counterpart <B>ATMManager</B>.&nbsp;
If that link is not null, it will retrieve bank and card information from
the database during login.&nbsp; It then connects to the correct bank server
to finish the login process.&nbsp; A persistent <B>Session</B> object will
also be created to keep records of transactions in this session.&nbsp;
The session ends when logout is invoked.
<BR>&nbsp;</UL>

<UL>
<LI>
<B>SessionImpl</B></LI>

<BR>Implementation for the interface "SessionIF".&nbsp;&nbsp; It implements
get methods: getB<TT>alance, getAccountInfo, getAccountHistory</TT>, and
transaction methods:<TT> deposit, withdraw, transferTo, payBill.</TT>

<P>Each session is created with an AccountIF object as one of the input
arguments.&nbsp; AccountIF thus serves as a servant object.&nbsp; All interface
methods invoke the corresponding methods on this servant object.

<P>This class contains a link to its persistent counterpart <B>Session</B>.&nbsp;
If that link is not null, it will log all transactions to that the persistent
Session object using the<TT> logTrx()</TT> method.&nbsp;<BR>
<BR>
Note that all transactions appear inside a synchronized block.&nbsp; This
is necessary for multi-thread operation.
<BR>&nbsp;</UL>

<LI>
<A HREF="Client.java">Client.java</A></LI>

<BR>The client code.&nbsp; It binds to the <B>SessionMgrImpl</B> object
using a server name (e.g. "ATM Session Manager").&nbsp; It then waits for
user commands to open accounts and to initiate transactions.&nbsp; The
runTerminal method translates command line inputs into method calls to
the server.&nbsp; One may also run the client with an input text file that
contains multiple command lines.&nbsp; An example is in <A HREF="Test1.txt">Test1.txt</A>.</UL>

<H3>
<FONT COLOR="#FF0000">Batch Files</FONT></H3>

<UL>
<LI>
<FONT COLOR="#000099">setEnv.bat</FONT></LI>

<BR>A batch file for setting the environment variables.</UL>

<UL>
<LI>
<FONT COLOR="#000099">build.bat</FONT></LI>

<BR>A batch file for building the client and server on <I>Windows</I>.&nbsp;
It will first invoke the IDL compiler and then compile the server and client
source codes.&nbsp; A subdirectory named "bank" will be created, which
contains the CORBA stub and skeleton codes and their corresponding class
files.</UL>

<UL>
<LI>
<FONT COLOR="#000099">runsrv.bat</FONT></LI>

<BR>A batch file for running the server. The command line format is:
<PRE>&nbsp;&nbsp;&nbsp; runsrv<TT> [database_file.odb] [command.txt]</TT></PRE>
If the optional database file is not specified, it simply runs without
connection to the persistent layer.
<BR>If the database file is specified, it will open it and use the information
therein.&nbsp; Also, a terminal thread is started to process input command
from the console.
<BR>If <TT>command.txt</TT> is specified, it will start a separate thread
to process the input commands in the file.&nbsp; An example is in <A HREF="bankData.txt">bankData.txt</A>.
<BR>&nbsp;
<LI>
<FONT COLOR="#000099">client.bat</FONT></LI>

<BR>A batch file for running the client.&nbsp; The command line format
is:
<PRE>&nbsp;&nbsp;&nbsp; <TT>client [hostname] [command.txt]</TT></PRE>
where the optional hostname (or IP address) is where the server is running
and <TT>command.txt</TT> is an optional input command file such as <A HREF="Test1.txt">Test1.txt</A>.</UL>

<H3>
<FONT COLOR="#FF0000">Running the Codes</FONT></H3>
This example was developed under VisiBroker (<A HREF="../studies.htm#visibroker">link</A>).&nbsp;
To run the codes, make sure that the VisiBroker Smart Agent (osagent) is
running on the server object's network.&nbsp; Also, the <A HREF="../bank/index.htm">Bank
Server</A> needs to be running since it process bank transactions.&nbsp;
(You need to put some bank account information into the bank server too.&nbsp;
Use the Test1.txt command file in the bank directory.)&nbsp; Then enter
the commands:

<P><I><TT>On Windows:</TT></I>
<UL>
<PRE><TT>start runsrv atmcs.odb bankdata.txt</TT></PRE>

<PRE><TT>client&nbsp; </TT>(or <TT>client [hostname] [Test1.txt])</TT></PRE>
</UL>
<I><TT>On Unix:</TT></I>
<UL>
<PRE><TT>vbj Server atmcs.odb bankdata.txt &amp;</TT></PRE>

<PRE><TT>vbj Client&nbsp; </TT>(or vbj C<TT>lient [hostname] [Test1.txt])</TT></PRE>
</UL>
From the console client, you may do for example:
<BR><TT>&nbsp;&nbsp;&nbsp; login 88881001 Jane 888</TT>
<BR>You may find the card numbers by typing in "showcard" from the atmcs
Server.&nbsp; You may find bank account information from the file Test1.txt
under the bank directory.

<P>Alternatively, you may use the<FONT COLOR="#3366FF"> </FONT><FONT COLOR="#000099">runall.bat
</FONT>file to start both the Bank Server and the atmcs Server.&nbsp; Be
sure to wait for the servers to come up (".... is ready") before going
over the pauses.&nbsp; The bank client window will close after finishing
putting data to the bank server.
<BR>
<HR WIDTH="100%">
<BR>&nbsp;
</BODY>
</HTML>
