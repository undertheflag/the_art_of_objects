//*************************************************************************
/*
 * FontChooser.java - A class for choosing fonts.
 *
 *   This file should be under $CLASSPATH/widget
 *
 *   Copyright (C) 1998-2000    Yun-Tung Lau
 *   All Rights Reserved.  The contents of this file are proprietary to
 *   the above copyright holder.
 */
//*************************************************************************

package widget;  

// standard java class libraries
import java.awt.*;
import java.awt.event.*;  // for mouse event processing

/**
 * A simple class for choosing fonts.  It triggers an item event
 * so that the selected font can be retrieved.
 *
 * Example of usage:<PRE>
 * Inside an AWT component class -
 *   FontChooser fontchooser = new FontChooser();
 *   add(fontchooser);
 *   fontchooser.addItemListener(this);
 *
 * Also in the same class -
 *   public void itemPerformed (ItemEvent evt) {
 *     if (evt.getSource() == fontchooser) {
 *        ...do something
 *     }
 *   }
 * </PRE>
 */
public class FontChooser extends Panel 
       implements ItemListener, ItemSelectable {

  // available font data
  private String[] fontNames = {"TimesRoman", "Helvetica", "Courier"};
  private String[] styleNames = {"plain", "italic", "bold", "bold-italic"};
  private int[] styleValues = {Font.PLAIN, Font.ITALIC, Font.BOLD, 
		       Font.ITALIC|Font.BOLD};
  private int[] sizes = { 8, 9, 10, 11, 12, 14, 16, 20, 24, 28, 32, 36, 40, 48};

  private Choice chFont = new Choice();
  private Choice chStyle = new Choice();
  private Choice chSize = new Choice();

  // Reference to collection of Listeners
  private ItemListener itemListener = null;

  /** The chosen font. */
  public Font font;

  private Font fonts[] = new Font[1];

  public FontChooser() {
    // let this receives Item events
    chFont.addItemListener(this);
    chStyle.addItemListener(this);
    chSize.addItemListener(this);

    /* Retrieve all the font names. | use fontNames now -YTLau
    for (int i=0; i<getToolkit().getFontList().length; i++) {
      chFont.addItem(getToolkit().getFontList()[i]);
    }
    */

    for (int i=0; i<fontNames.length; i++) {
      chFont.addItem(fontNames[i]);
    }

    // Initialize the font style choice.
    for (int i=0; i<styleNames.length; i++) {
      chStyle.addItem(styleNames[i]);
    }

    String s = new String();
    // Initialize the font sizes choice.
    for (int i=0; i<sizes.length; i++) {
      chSize.addItem(s.valueOf(sizes[i]));
    }

    setLayout(new FlowLayout(FlowLayout.LEFT));
    add(chFont);
    add(chStyle);
    add(chSize);
  }

  // This will cause unknown applicatoin error for JDK 1.2!  Very strange.
  // The superclass already has this method defined.  It returns the 
  // internal font for the panel.
  //  public Font getFont()

  /** Set the font by matching it with the local setting. */
  public void setFont(Font f) {
    int i=0;

    String fn = f.getName();   // matching first 5 characters
    for (i=0; i<fontNames.length; i++) {
      if ( fontNames[i].regionMatches(true, 0, fn, 0, 5) ) break;
    }
    if (i>=fontNames.length) {
      System.err.println("FontChooser: No such font name.");
      i = 0;
    }
    chFont.select(i);

    int style = f.getStyle();
    for (i=0; i<styleValues.length; i++) {
      if (style == styleValues[i]) break;
    }
    if (i>=styleValues.length) {
      System.err.println("FontChooser: No such style.");
      i = 0;
    }
    chStyle.select(i);

    int size = f.getSize();
    for (i=0; i<sizes.length; i++) {
      if (size == sizes[i]) break;
    }
    if (i>=sizes.length) {
      System.err.println("FontChooser: No such font size.");
      i = 0;
    }
    chSize.select(i);
  }

  /** Processes item events */
  public void itemStateChanged(ItemEvent e) {
    // set the font
    font = new Font( chFont.getSelectedItem(),
		     styleValues[chStyle.getSelectedIndex()],
		     sizes[chSize.getSelectedIndex()] );
    fonts[0] = font;

    // triggers a new item event with font as the item object
    if (itemListener != null) {
      // generate and dispatch an itemEvent
      itemListener.itemStateChanged( new ItemEvent( this, 
	    ItemEvent.ITEM_STATE_CHANGED, (Object) font, 0) );
    } 
  }


  //--------------- Item listener setting -----------------------------------
  /** Add a listener to item event generated by ImageButton */
  public void addItemListener(ItemListener l) {
    itemListener = AWTEventMulticaster.add(itemListener, l);
  }

  /** Remove a listener to item event generated by ImageButton */
  public void removeItemListener(ItemListener l) {
    itemListener = AWTEventMulticaster.remove(itemListener, l);
  }

  /** Returns the selected items */
  public Object[] getSelectedObjects() {
    return (Object[]) fonts;
  }
  //------------------------------------------------------------------

  // A small test frame
  static public void main(String[] args) {
    Frame f = new Frame();
    f.add(new FontChooser());
    f.pack();
    f.setVisible(true);
  }
  
}
