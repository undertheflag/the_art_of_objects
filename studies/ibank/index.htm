<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; U) [Netscape]">
   <meta http-equiv="keywords" content="bank server">
   <meta name="Author" content="Yun-Tung Lau">
   <title>Readme for the ATM Central Server example</title>
</head>
<body text="#000000" bgcolor="#FFFFFF" link="#0000FF" vlink="#990066" alink="#FF0000">

<center>
<h2>
<font color="#3333FF">iBank - <font size=+1>a Web Interface for the ATM
Central Server</font></font></h2></center>
In this example the <b>iBank </b>web front end interacts with the ATM Central
Server (atmcs), which further relays transaction requests to individual
banks.&nbsp; The interface design follows the object factory pattern.&nbsp;
This example demonstrates how to:
<ul>
<li>
Design a web application using the Model/View/Controller framework</li>

<li>
Implement a web application using the object factory pattern</li>

<li>
Implement secure session management within the object factory pattern</li>
</ul>
This server must be used together with the ATM Central Server (<a href="../atmcs-i/index.htm">interface
layer</a>) and the&nbsp; <a href="../bank/index.htm">Bank Server</a>.&nbsp;
Together with web clients, they form a four-tier software system.
<h3>

<hr WIDTH="80%"></h3>

<h3>
<font color="#FF0000">Source Files</font></h3>

<ul>
<li>
<a href="atmcs.idl">atmcs.idl</a></li>

<br>IDL file for the interfaces SessionIF and SessionMgrIF in the atmcs
module.&nbsp; (IF stands for interface.)&nbsp; Also defined are exception
"AtmcsError", a cash card data structure CardInfo, and an account information
structure AccountInfo.
<p>SessionMgrIF only has <tt>login </tt>and <tt>logout</tt> operations
exposed, though the implementation class may have conventional object management
operations.
<br>&nbsp;
<li>
<a href="Main.java">Main.java</a></li>

<br>The main processor for web client requests.&nbsp; Main itself is a
servlet that runs within a servlet engine.&nbsp; In this example the Apache
JServ engine is used.&nbsp; However, since the servlet depends only on
the interfaces in the packages javax.servlet and javax.servlet.http, another
other compliant engine may be used.
<p>This servlet acts as a client to the ATM Central Server.&nbsp; It init(
) method tries to connect to that Server when the servlet is first loaded
into the servlet engine.&nbsp; The service method processes all client
requests by extracting information from the HTTP query string or posted
data.&nbsp; Main.java is also an object factory in that it first verifies
the client's credential and then dynamically creates an "Application Bean"
to process specific requests.&nbsp; Thus all upfront security controls
are handled by this servlet.
<br>&nbsp;
<li>
<a href="Account.java">Account.java</a></li>

<br>This class implements the interface <a href="ApplicationBean.java">ApplicationBean</a>,
which defines only two operations: init and process.&nbsp; The method init
sets up some initial resources, including an HTML file template (<a href="payBill.htm">payBill.htm</a>).&nbsp;
The process method processes all requests related to an account (balance,
transfer, pay bill, etc.)&nbsp; Currently only balance and pay bill use
the HTML file template.
<p>The template contains variables in the form ${...}, which are replaced
by their actual values before returning to the client.&nbsp; The HTML template
also contains some client-side javascript for simple error checking before
contacting the server.
<br>&nbsp;
<li>
<a href="Template.java">Template.java</a></li>

<br>A simple utility that handles variable substitution in an HTML template
file.&nbsp; It makes use of regular expression to locate the variables.</ul>

<h3>
<font color="#FF0000">Batch Files</font></h3>

<ul>
<li>
<font color="#000099">build.bat</font></li>

<br>A batch file for building the client and server on <i>Windows</i>.&nbsp;
To build just the Java codes, simply type "build".&nbsp; To build also
the IDL codes, use "build idl".
<p>For the latter case, it will first invoke the IDL compiler and then
compile the client source codes for atmcs.idl.&nbsp; A subdirectory named
"atmcs" will be created, which contains the CORBA stub codes and their
corresponding class files.&nbsp; A jar file atmcs-i.jar is generated afterwards.
<li>
<font color="#000099">setenv.bat</font></li>

<br>A batch file for setting some environment variables.
<li>
<font color="#000099">testmain.bat</font></li>

<br>A batch file for testing the Main class.</ul>

<h3>
<font color="#FF0000">Running the Codes</font></h3>
This example was developed under VisiBroker (<a href="../studies.htm#visibroker">link</a>)
and Apache web server with JServ servlet engine (<a href="../studies.htm#apache">link</a>).&nbsp;
To run the servlet, you need to set up the JServ servlet engine correctly.
(Click <a href="../apache-setup.txt">here</a> for details.)
<p>After the set up is complete, make sure Apache is running with "net
start" (otherwise do "net start apache").&nbsp; Then point your web browser
to <a href="http://localhost/ooda/">http://localhost/ooda/</a> (note the
trailing slash!).&nbsp; Try the demo sevlet "Counter" to see if the servlet
engine is really working.&nbsp; Proceed only if it works.&nbsp; If not,
it means your configuration for JServ is problematic.
<p>Before you can invoke the iBank application, you need to bring up both
the bank server and the atmcs-i server (we use only the interface layer
of atmcs to keep things simple).&nbsp; This involves three steps (since
this is a four-tier application, all tiers must be running):
<br>&nbsp;
<ol>
<li>
cd to the studies/bank directory and do:</li>

<br><tt>&nbsp;&nbsp;&nbsp; start runsrv</tt>
<li>
After the server is up, do:</li>

<br><tt>&nbsp;&nbsp;&nbsp; client localhost test1.txt</tt>
<br>This populates the bank server with some account informatoin.
<li>
cd to&nbsp; the studies/atmcs-i directory and do:</li>

<br><tt>&nbsp;&nbsp;&nbsp; start runsrv</tt>
<br>After the server is up, you may invoke ibank from <a href="http://localhost/ooda/">http://localhost/ooda/</a>.&nbsp;
To login, use "John" as username and "999" as password.</ol>

<p><br>
<hr WIDTH="100%">
<br>&nbsp;
</body>
</html>
